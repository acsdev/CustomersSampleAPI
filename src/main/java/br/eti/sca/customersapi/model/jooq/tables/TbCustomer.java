/*
 * This file is generated by jOOQ.
 */
package br.eti.sca.customersapi.model.jooq.tables;


import br.eti.sca.customersapi.model.jooq.DbCompany;
import br.eti.sca.customersapi.model.jooq.Indexes;
import br.eti.sca.customersapi.model.jooq.Keys;
import br.eti.sca.customersapi.model.jooq.tables.records.TbCustomerRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbCustomer extends TableImpl<TbCustomerRecord> {

    private static final long serialVersionUID = 1812296279;

    /**
     * The reference instance of <code>db_company.tb_customer</code>
     */
    public static final TbCustomer TB_CUSTOMER = new TbCustomer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbCustomerRecord> getRecordType() {
        return TbCustomerRecord.class;
    }

    /**
     * The column <code>db_company.tb_customer.id</code>.
     */
    public final TableField<TbCustomerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_company.tb_customer.nr_register</code>.
     */
    public final TableField<TbCustomerRecord, Long> NR_REGISTER = createField("nr_register", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_company.tb_customer.ds_usename</code>.
     */
    public final TableField<TbCustomerRecord, String> DS_USENAME = createField("ds_usename", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_company.tb_customer.ds_password</code>.
     */
    public final TableField<TbCustomerRecord, String> DS_PASSWORD = createField("ds_password", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>db_company.tb_customer.ds_name</code>.
     */
    public final TableField<TbCustomerRecord, String> DS_NAME = createField("ds_name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>db_company.tb_customer.dt_birth</code>.
     */
    public final TableField<TbCustomerRecord, Date> DT_BIRTH = createField("dt_birth", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>db_company.tb_customer.ds_email</code>.
     */
    public final TableField<TbCustomerRecord, String> DS_EMAIL = createField("ds_email", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * Create a <code>db_company.tb_customer</code> table reference
     */
    public TbCustomer() {
        this(DSL.name("tb_customer"), null);
    }

    /**
     * Create an aliased <code>db_company.tb_customer</code> table reference
     */
    public TbCustomer(String alias) {
        this(DSL.name(alias), TB_CUSTOMER);
    }

    /**
     * Create an aliased <code>db_company.tb_customer</code> table reference
     */
    public TbCustomer(Name alias) {
        this(alias, TB_CUSTOMER);
    }

    private TbCustomer(Name alias, Table<TbCustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbCustomer(Name alias, Table<TbCustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbCompany.DB_COMPANY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TB_CUSTOMER_DS_USENAME, Indexes.TB_CUSTOMER_NR_NUMBER, Indexes.TB_CUSTOMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TbCustomerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TB_CUSTOMER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TbCustomerRecord> getPrimaryKey() {
        return Keys.KEY_TB_CUSTOMER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TbCustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<TbCustomerRecord>>asList(Keys.KEY_TB_CUSTOMER_PRIMARY, Keys.KEY_TB_CUSTOMER_NR_NUMBER, Keys.KEY_TB_CUSTOMER_DS_USENAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbCustomer as(String alias) {
        return new TbCustomer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbCustomer as(Name alias) {
        return new TbCustomer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbCustomer rename(String name) {
        return new TbCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbCustomer rename(Name name) {
        return new TbCustomer(name, null);
    }
}
